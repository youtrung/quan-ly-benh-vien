/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DAO.DAO_Roles;
import MODEL.TableModelRoles;

import POJO.POJO_Roles;
import POJO.POJO_User;
import SqlServerProvider.SQLConnectThrowJDBC;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import jdk.nashorn.internal.scripts.JO;

/**
 *
 * @author Admin
 */
public class GUI_Roles extends javax.swing.JPanel {
        TableModelRoles tblModelrole;
        POJO_User user=new POJO_User();
        DefaultListModel listModelPrivileges;
        DefaultListModel listModelSchema;
        DefaultListModel listModelObj;
         ArrayList<String> listdataPrivileges;
    /**
     * Creates new form GUI_Roles
     */
    public GUI_Roles() {
        initComponents();
        initTableRole();
        pnListprivileges.setVisible(false);
        pnObj.setVisible(false);
        initListSchema();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRoles = new javax.swing.JTable();
        btnAddroles = new javax.swing.JButton();
        btnDropRoles = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtNameRoles = new javax.swing.JTextField();
        btnGrant = new javax.swing.JButton();
        pnListprivileges = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstPrivileges = new javax.swing.JList<>();
        btnList = new javax.swing.JRadioButton();
        btnRevoke = new javax.swing.JButton();
        rdGrant = new javax.swing.JRadioButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsUser = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        rdObj = new javax.swing.JRadioButton();
        pnObj = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        listObj = new javax.swing.JList<>();
        ckSelect = new javax.swing.JCheckBox();
        ckInsert = new javax.swing.JCheckBox();
        ckDelete = new javax.swing.JCheckBox();
        btnGrantTable = new javax.swing.JButton();
        ckUpd = new javax.swing.JCheckBox();
        chkExe = new javax.swing.JCheckBox();

        tblRoles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblRoles);

        btnAddroles.setText("Add Roles");
        btnAddroles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddrolesActionPerformed(evt);
            }
        });

        btnDropRoles.setText("Delete Roles");
        btnDropRoles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDropRolesActionPerformed(evt);
            }
        });

        jLabel1.setText("Role_Name:");

        btnGrant.setText("Grant Privileges");
        btnGrant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGrantActionPerformed(evt);
            }
        });

        lstPrivileges.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(lstPrivileges);

        javax.swing.GroupLayout pnListprivilegesLayout = new javax.swing.GroupLayout(pnListprivileges);
        pnListprivileges.setLayout(pnListprivilegesLayout);
        pnListprivilegesLayout.setHorizontalGroup(
            pnListprivilegesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnListprivilegesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        pnListprivilegesLayout.setVerticalGroup(
            pnListprivilegesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnListprivilegesLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 13, Short.MAX_VALUE))
        );

        btnList.setText("List_Privileges");
        btnList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListActionPerformed(evt);
            }
        });

        btnRevoke.setText("Revoke Privileges");
        btnRevoke.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRevokeActionPerformed(evt);
            }
        });

        rdGrant.setText("With admin option");

        lsUser.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lsUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lsUserMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(lsUser);

        jLabel2.setText("Đối tượng:");

        rdObj.setText("Obj_name");
        rdObj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdObjActionPerformed(evt);
            }
        });

        listObj.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(listObj);

        javax.swing.GroupLayout pnObjLayout = new javax.swing.GroupLayout(pnObj);
        pnObj.setLayout(pnObjLayout);
        pnObjLayout.setHorizontalGroup(
            pnObjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
        );
        pnObjLayout.setVerticalGroup(
            pnObjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
        );

        ckSelect.setText("Select");

        ckInsert.setText("Insert");

        ckDelete.setText("Delete");

        btnGrantTable.setText("GrantTable");
        btnGrantTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGrantTableActionPerformed(evt);
            }
        });

        ckUpd.setText("Update");
        ckUpd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckUpdActionPerformed(evt);
            }
        });

        chkExe.setText("Execute");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAddroles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDropRoles)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNameRoles, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(rdGrant)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGrant)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRevoke)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdObj)
                            .addComponent(pnObj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnListprivileges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ckSelect)
                            .addComponent(ckUpd))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(ckInsert)
                                .addGap(18, 18, 18)
                                .addComponent(ckDelete)
                                .addGap(29, 29, 29)
                                .addComponent(btnGrantTable))
                            .addComponent(chkExe))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdGrant, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAddroles)
                        .addComponent(btnDropRoles)
                        .addComponent(jLabel1)
                        .addComponent(txtNameRoles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnGrant)
                        .addComponent(btnRevoke)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnList)
                            .addComponent(pnListprivileges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(rdObj)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pnObj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGap(11, 11, 11)
                            .addComponent(jLabel2)
                            .addGap(3, 3, 3)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckSelect)
                    .addComponent(ckInsert)
                    .addComponent(ckDelete)
                    .addComponent(btnGrantTable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckUpd)
                    .addComponent(chkExe))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddrolesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddrolesActionPerformed
        // TODO add your handling code here:
        POJO_Roles ro=new POJO_Roles();
        ro.setRoles(txtNameRoles.getText());
        DAO_Roles daoRo=new DAO_Roles();
        daoRo.addRoles(txtNameRoles.getText());
        tblModelrole.addElement(ro);
    }//GEN-LAST:event_btnAddrolesActionPerformed

    private void btnDropRolesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDropRolesActionPerformed
        // TODO add your handling code here
        int index=tblRoles.getSelectedRow();
                 DAO_Roles daoRo=new DAO_Roles();
                 POJO_Roles ro=new POJO_Roles();
                 ro.setRoles(txtNameRoles.getText());
                 daoRo.dropRoles(txtNameRoles.getText());
                 tblModelrole.removeByIndex(index);
    }//GEN-LAST:event_btnDropRolesActionPerformed

    private void btnListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListActionPerformed
        // TODO add your handling code here:
        
        if (btnList.isSelected())
        {
            initList();
            pnListprivileges.setVisible(true);
        }
        else 
            pnListprivileges.setVisible(false);
    }//GEN-LAST:event_btnListActionPerformed

    private void btnGrantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGrantActionPerformed
        // TODO add your handling code here:
        int index=lstPrivileges.getSelectedIndex();
        if (index <0)
        {
            JOptionPane.showMessageDialog(null,"Bạn phải chọn quyền cần gán","Thông báo",JOptionPane.OK_CANCEL_OPTION);
            return ;
        }
        DAO_Roles daoRo=new DAO_Roles();
        if(rdGrant.isSelected())
        {
            daoRo.grantPrivileges_WithAdmin(lstPrivileges.getSelectedValue(),txtNameRoles.getText());
        }
        else
        daoRo.grantPrivileges(lstPrivileges.getSelectedValue(),txtNameRoles.getText());
        JOptionPane.showMessageDialog(null,"SQL statement has been processed successfully","Confirm",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnGrantActionPerformed

    private void btnRevokeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRevokeActionPerformed
        // TODO add your handling code here:
         int index=lstPrivileges.getSelectedIndex();
        if (index <0)
        {
            JOptionPane.showMessageDialog(null,"Bạn phải chọn quyền cần thu hồi","Thông báo",JOptionPane.OK_CANCEL_OPTION);
            return ;
        }
        DAO_Roles daoRo=new DAO_Roles();
        daoRo.revokePrivileges(lstPrivileges.getSelectedValue(),txtNameRoles.getText());
        JOptionPane.showMessageDialog(null,"SQL statement has been processed successfully","Confirm",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnRevokeActionPerformed

    private void rdObjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdObjActionPerformed
       if (lsUser.getSelectedValue()==null)
       {
           JOptionPane.showMessageDialog(null,"Hãy chọn đối tượng cần xem bảng ");
           rdObj.setSelected(false);
           return;
       }
       else if (!rdObj.isSelected())
       {
            pnObj.setVisible(false);
       }
       else 
       {
           initListObject();
           pnObj.setVisible(true);
       }
    }//GEN-LAST:event_rdObjActionPerformed

    private void btnGrantTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGrantTableActionPerformed
        // TODO add your handling code here:
        try 
        {
        ArrayList<String> ds=new ArrayList<>();
        if(ckSelect.isSelected())
        {
            ds.add(ckSelect.getText()+",");
        }
        if(ckInsert.isSelected())
        {
            ds.add(ckInsert.getText()+",");
        }
        if(ckDelete.isSelected())
        {
            ds.add(ckDelete.getText()+",");
        }
         if(ckUpd.isSelected())
        {
            ds.add(ckUpd.getText()+",");
        }
          if(chkExe.isSelected())
        {
            ds.add(chkExe.getText()+",");
        }
         String kq="";
         for(String s : ds)
         {
            kq+=s; 
         }
        String query=kq.substring(0,kq.length()-1);  
        if(listObj.getSelectedValue().isEmpty())
        {
            JOptionPane.showMessageDialog(null,"hãy chọn bản cần gắn");
            return ;
        }
         if(txtNameRoles.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null,"Không được để trống");
            return ;
        }
        
        DAO_Roles.grantObjName(query,lsUser.getSelectedValue()+"."+listObj.getSelectedValue(),txtNameRoles.getText());
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null,e.getMessage());
            return;
        }
        
    }//GEN-LAST:event_btnGrantTableActionPerformed

    private void ckUpdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckUpdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ckUpdActionPerformed

    private void lsUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsUserMouseClicked
        // TODO add your handling code here:
        pnObj.setVisible(false);
        rdObj.setSelected(false);
    }//GEN-LAST:event_lsUserMouseClicked
    public void initTableRole(){
        tblModelrole=new TableModelRoles();
        tblRoles.setModel(tblModelrole);
        tblRoles.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                 if (e.getValueIsAdjusting()){
                        return;
                }
                 int index=tblRoles.getSelectedRow();
                 if (index <=0)
                 {
                     return;
                 }
                 POJO_Roles ro=tblModelrole.getByIndex(index);
                 txtNameRoles.setText(ro.getRoles());
            }
        });
    }
    public void initListSchema(){
         try {
             listModelSchema=new DefaultListModel();
            SQLConnectThrowJDBC provider=new SQLConnectThrowJDBC();
            provider.Open(user.getUsername(), user.getPassword(),user.getEnable(),user.getHost(),user.getPort(),user.getSid());
            String query="select username from dba_users where account_status = 'OPEN'";
            ResultSet rs=provider.executeQuery(query);
            while(rs.next())
            {
                listModelSchema.addElement(rs.getString(1));
            }
            provider.Close();
        } catch (SQLException ex) {
            Logger.getLogger(GUI_User.class.getName()).log(Level.SEVERE, null, ex);
        }
        lsUser.setModel(listModelSchema);
    }
    public void initListObject(){
         try {
             listModelObj=new DefaultListModel();
            SQLConnectThrowJDBC provider=new SQLConnectThrowJDBC();
            provider.Open(user.getUsername(), user.getPassword(),user.getEnable(),user.getHost(),user.getPort(),user.getSid());
            String query=String.format("select table_name from dba_tables where owner = '%s' ",lsUser.getSelectedValue());
            ResultSet rs=provider.executeQuery(query);
            while(rs.next())
            {
                listModelObj.addElement(rs.getString(1));
            }
            provider.Close();
        } catch (SQLException ex) {
            Logger.getLogger(GUI_User.class.getName()).log(Level.SEVERE, null, ex);
        }
        listObj.setModel(listModelObj);
    }
    public void initList()
    {
             try {
             listModelPrivileges=new DefaultListModel();
            SQLConnectThrowJDBC provider=new SQLConnectThrowJDBC();
            provider.Open(user.getUsername(), user.getPassword(),user.getEnable(),user.getHost(),user.getPort(),user.getSid());
            String query="select privilege from user_sys_privs";
            ResultSet rs=provider.executeQuery(query);
            while(rs.next())
            {
                listModelPrivileges.addElement(rs.getString(1));
            }
            listModelPrivileges.addElement("Select");
            listModelPrivileges.addElement("Excute");
           
            provider.Close();
        } catch (SQLException ex) {
            Logger.getLogger(GUI_User.class.getName()).log(Level.SEVERE, null, ex);
        }
        lstPrivileges.setModel(listModelPrivileges);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddroles;
    private javax.swing.JButton btnDropRoles;
    private javax.swing.JButton btnGrant;
    private javax.swing.JButton btnGrantTable;
    private javax.swing.JRadioButton btnList;
    private javax.swing.JButton btnRevoke;
    private javax.swing.JCheckBox chkExe;
    private javax.swing.JCheckBox ckDelete;
    private javax.swing.JCheckBox ckInsert;
    private javax.swing.JCheckBox ckSelect;
    private javax.swing.JCheckBox ckUpd;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList<String> listObj;
    private javax.swing.JList<String> lsUser;
    private javax.swing.JList<String> lstPrivileges;
    private javax.swing.JPanel pnListprivileges;
    private javax.swing.JPanel pnObj;
    private javax.swing.JRadioButton rdGrant;
    private javax.swing.JRadioButton rdObj;
    private javax.swing.JTable tblRoles;
    private javax.swing.JTextField txtNameRoles;
    // End of variables declaration//GEN-END:variables
}
